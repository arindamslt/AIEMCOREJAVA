DATE:16.04.2024
========================================================================
FEATURES OF JAVA
======================================================
1.PLATFORM INDEPENDENT
2.OBJECT ORIENTED PROGRAMMING(OOPS)
3.MULTITHREADING
===========================
javac X.java

X.java====JAVA COMPILER====x.class
java X

x.class====JVM(JAVA VIRTUAL MACHINE)====O/P

JVM
==========================
JAVA VIRTUAL MACHINE
IT IS AN ABSTRACT MACHINE WHOSE PURPOSE TO EXECUTE COMPILED JAVA CLASS.

JDK JRE  JVM JIT
=================================================
JDK==JAVA DEVELOPMENT TOOLKIT
JRE==JAVA RUNTIME ENVIRONMENT
JVM==JAVA VIRTUAL MACHINE
JIT===JUST IN TIME COMPILER
=============================================================
JAVA VERSION===JAVA 17
EDITOR===NOTEPAD
IDE===INTEGRATED DEVELOPMENT ENVIRONMENT
EX:ECLIPSE,NETBEANS,STS,INTELLIJ
=================================================================
IDENTIFIER
==============================
NAME IN JAVA PROGRAM IS CALLED IDENTIFIER.IT CAN BE A CLASS NAME,IT CAN BE A METHOD NAME ,IT  CAN BE A VARIABLE NAME.

DATA TYPES
==================================
VARIABLE
==============================
NAMED STORED LOCATION
THREE KIND OF VARIBLE
===============================
1.INSTANCE VARIABLE
2.LOCAL VARIABLE
3.STATIC VARIBLE


OPERATOR
============================
1.ARITHMETIC
2.INCREMENT AND DECREMENT
================================
++  ,--
3.LOGICAL
-----------------------
& && ! !!
4.TERNARY
5.TYPE CASTING OPERATOR
6.ASSIGNMENT
7.INSTANCE OF
8.BIT WISE
9.RELATIONAL

CONTROL STRUCTURE
=================================
IF ELSE ELSE IF 
LOOP==FOR,WHILE,DO WHILE
BREAK CONTINUE

for(intialization;condition;increment/decrement)

OBJECT ORIENTED PROGRAMMING
=========================================================
FEATURES
======================================================
1.ENCAPSULATION
2.POLYMORPHISM
  STATIC
  DYNAMIC
3.INHERITANCE
   SINGLE
   MULTILEVEL
  HIERARCHICAL
4.ABSTRACTION
5.DYNAMIC BINDING

WHAT IS CLASS?
=========================================
CLASS IS COLLECTION OF OBJECTS WITH COMMON PROPERTIES AND BEHAVIOUR
IT IS DEAD TEMPLATE
WHAT IS OBJECT?
OBJECT IS REAL WORLD ENTITY


CHAIR TABLE BOOKSHELF    FURNITURE
=====================    ========
OBJECTS                  CLASS
LENGTH
WIDTH
HEIGHT
KEEPING SOMETHING

ENCAPSULATION
==================================================

CROCIN650
BINDING OF DATA AND METHOD TOGETHER
UML
================================
UNIFIED MODELLING LANGUAGE
PURPOSE
========================
DRAW THE CLASS DIAGRAM
SYMBOLS

THE SUPER CLASS IN JAVA IS Object Class  WHICH IS BELONGS TO java.lang.* Package
WHATEVER THE CLASS YOU HAVE CREATED ALL ARE THE CHILD OF OBJECT CLASS

POLYMORPHISM
=============================================================
POLY===MANY
MORPHISM=FORMS
THERE ARE TWO TYPES OF POLYMORPHISM
====================================
1.STATIC POLYMORPHISM
2.DYNAMIC POLYMORPHISM
STATIC POLYMORPHISM
================================
THIS IS ALSO CALLED METHOD OVERLOADDING
METHOD OVERLOADDING
===============================
SAME METHOD NAME WITH DIFFERENT ARGUMENT PASSING BODY MORE OR LESS SAME.
TASK1()
TASK2()
TASK3()
TASK(X.Y)
TASK(X,Y,Z)
TASK(X)

CONSTRUCTOR
=========================================
CONSTRUCTOR IS THE SAME NAME OF CLASS NAME.IT IS NOT EVEN VOID NOR RETURN TYPE BECAUSE IT RETURN CLASS ITSELF.
UTILITY
==============================================
1.CREATING OBJECT OF A CLASS
2.AT THE TIME OF CREATING THE OBJECT INITIALIZE THE OBJECT

==================================================================================
CONSTRUCTOR OVERLOADDING
===============================================================================
 DATE:17.04.2024
==================================================================
  INHERITANCE
==========================================================================
 AQUIRING THE PROPERTY OF CLASS INTO ANOTHER CLASS.

TYPES OF INHERITANCE
=============================
 1.SINGLE
 2.MULTILEVEL
 3.HIERARCHICAL

DYNAMIC POLYMORPHISM
================================
IT IS CALLED METHOD OVERRIDDING
SAME METHOD NAME BOTH IN CHILD AND PARENT BUT BODY IS DIFFERENT CALLED METHOD OVERRIDDING
ALWAYS OVERRIDDEN METHOD IS CALLED.
UTILITY OF SUPER
============================================
1.CALLING THE SUPER CLASS CONSTRUCTOR
2.CALLING THE SUPER CLASS METHOD WHICH IS HIDDEN IN SUBCLASS


ABSTRACTION
============================================
1.ABSTRACT CLASS
============================================
A CLASS IS CONSIDERED TO BE ABSTRACT IF THERE IS ATLEAST ONE METHOD IS ABSTRACT
Ex:
abstract class Test
{
   public abstract void show();
public void m1();
}

2.ABSTRACT METHOD
=======================
A METHOD IS CALLED ABSTRACT IF THERE IS A NO BODY
EX:public abstract void show();
RESTRICTION
==========================================
WE CAN'T CREATE THE OBJECT OF ABSTRACT CLASS


MODIFIER
=========================================
MODIFIER TELLS HOW A MEMBER OF A CLASS IS BEING ACCESSED INTO ANOTHER CLASS
LIST OF MODIFIER
==========================================
1.private====================
2.public
3.protected     ACCESS SPECIFIER
4.default================
5.static
6.final
7.abstract
8.native
9.synchronized

PRIVATE MEMBER ARE ACCESSABLE SAME CLASS ONLY
DEFAULT MEMBER ARE ACCESSABLE SAME CLASS AND IT'S CHILD CLASS BUT MUST IN SAME PACKAGE
PUBLIC AND PROTECTED MEMBERS ARE ACCESSABLE SAME CLASS AND IT'S CHILD EVEN IF THEY ARE IN DIFFERENT PACKAGE

STATIC
===========================
IT IS USED BY ITSELF.IF WE DECLARE A VARIBLE OR METHOD IS STATIC NO NEED TO CREATE OBJECT OF A CLASS TO ACCESS
IT.WE CAN ACCESS BY CLASS NAME.
RESTRICTION
===========================
STATIC MEMBERS ARE ACCESSABLE STATIC METHOD ONLY
STATIC BLOCK
================================================
IT EXECUTES ONLY ONCE AND IT EXECUTES FIRST.
RESTRICTION
========================================
IT WILL ACCESS ONLY STATIC MEMBER

FINAL
=======================================
IF WE DECLARE A VARIABLE IS FINAL IT IS CONSTANT
IF WE DECLARE A METHOD IS FINAL IT CAN'T BE OVERRIDDEN
IF WE DECLARE THE CLASS IS FINAL IT CAN'T BE EXTENDED
===================================================================
NESTED CLASS
===========================================================
CLASS WITHIN CALSS IS CALLED NESTED CLASS
CLASS x
{
  CLASS Y
  {

  }
}

DATE:18.04.2024
========================================================================================================
  INTERFACE
=====================================================================================================
INTERFACE IS A CONTRACT BETWEEN THE CLEINT CODE AND THE IMPLEMENTED CLASS
IN INTERFACE BY DEFAULT ALL METHODS ARE ABSTRACT
JAVA8 INTRODUCE DEFAULT METHOD IN INTERFACE

ABSTARCT CLASS                VS                INTERFACE
==================================================================================
1.ATLEAST ONE METHOD IS ABSTRACT         1.BY DEFAULT ALL METHODS ARE ABSTRACT
2.IT IS EXTENED                          2.IT IS IMPLEMEMNTED
3.IT CAN'T OVERCOME MULTIPLE             3.IT CAN ABLE TO OVERCOME MULTIPLE INHERITANCE

INHERITANCE 
============================================================================================
YOU CAN'T CREATE OBJECT OF INTERFACE AND ABSTRACT CLASS

EXCEPTION HANDELLING
==============================   
ERROR===ERROR IS NOT RECOVERABLE
EXCEPTION==IT IS RECOVERABLE
EXCEPTION IS EVENT WHICH OCCUR DURING TRHE EXECUTION OF A PROGRAM IT WILL PREVENT THE EXECUTION OF PROGRAM.
IF YOU HANDLE THE EXCEPTION THEN REST OF THE PART WILL BE EXECUTED
HANDLE THE EXCEPTION BY MEANS OF
========================================
TRY
CATCH
FINALLY
THROW
THROWS
TYPES OF EXCEPTION
===============================================
1.CHECKED EXCEPTION=====OTHER THAN RUNTIME EXCEPTION AND IT'S SUB CLASS CALLED CHECKED
2.UNCHECKED EXCEPTION===RUNTIME EXCEPTION AND IT'S SUBCLASS CALLED UNCHECKED EXCEPTIO 
IN CASE OF CHECKED EXCEPTION IT IS MANDATORY TO WRITE TRY AND CATCH BLOCK
==================================================================
EXCEPTION MESSAGE HANDELLING
====================================================================
EXCEPTIONOBJECT.printStackTrace();====PACKAGE NAME ALONG WITH CLASS NAME+MESSAGE+LINE NUMBER WHERE EXCEPTION OCCUR
System.out.println(exceptionobject);====PACKAGE NAME ALONG WITH CLASS NAME+MESSAGE

finally
==========================================================
WHETHER THE EXCEPTION OCCUR OR NOT FINALLY BLOCK WILL BE EXECUTED
PURPOSE
=============================
CLEANING UP TASK

IF WE DO NOT WANT TO USE TRY AND CATCH THEN WE GO FOR THROWS  CLAUSE
THROWS CLAUSE TO BE WRITTEN ALONG WITH THE METHOD NAME
FOR EX:
public void res() throws ArithmeticException,Exception
THROWS SHOULD BE REQUIRED BOTH CALLER AND CALLE ENVIRONMENT


USER DEFINED EXCEPTION
=============================================================

THROW CLAUSE IS USED TO THROW THE USERDEFINED EXCEPTION OBJECT.WHEN USERDEFINED
EXCEPTION OCCUR JVM CAN'T THROW THE EXCEPTION AUTOMATICALLY.AS A PROGRAMMER YOU
HAVE TO THROW THE EXCEPTION EXCIPLITLY BY THROW CLAUSE.

USER INPUT CAN GIVEN BY TWO WAYS
===================================
1.BufferReader Class====import java.io.*;
2.Scanner Class=========import java.util.*


DATE:19.04.2024
=========================================================================================================
STRING HANDELLING
=====================================================================================================
STRING IS AN IMMUTABLE OBJECT.
String S="ARUP";//STRING LITERAL
String s1=new String("ARUP");//OBJECT

STRING HANDELLING METHODS
==================================
isEmpty()
length()
concat()
charAt()
substring()
indexOf()
toLowerCase()
toUpperCase()
trim()
split()

Why String Contant Pool is required?
==============================================================
String city="KOLKATA";
==
equals()

JDBC
===========================================================================================================
JAVA DATABASE CONNECTIVITY
=======================================================================================================
DBMS
============================================================
DATABASE MANAGEMENT SYSTEM
RDBMS
==================================================================
RELATIONAL DATABASE MANAGEMENT SYSTEM
=======================================================================

DATABASE
============================================================================
DATA=======DATA IS RAW FACTS
FIELDS
RECORDS/TUPLE
TABLE
DATABASE==IT IS A COLLECTION OF INTERELATED TABLES OR DATA
DBMS===DATABSE+SQL(STRUCTRED QUERY LANGUAGE)
ADVANTAGE DBMS
=============================
1.MINIMIZE DATA REDUNDENCY
2.SECURITY RESTRICTION IS THERE
3.DATA CAN BE SHARED
4.INTRIGRITY CONSTRAINT CAN BE MAINTAINED
GENERATION OF LANGUAGE
====================
1ST GEN===0,1
2ND GEN==ASSEMBLY LANGUAGE===ASSENBLER====0,1
3RD GEN==HLL=JAVA====COMPILER/INTERPRETR===,
4TH GEN===NON PROCEDURAL LANGUAGE====EX:SQL
SELECT * FROM STUDENT;
HOW PART IS NOT  KNOWN TO US
WHAT PART KNOWN TO US
PL/SQL

RDBMS SOFTWARE
========================
ORACLE,MYSQL,SQLSERVER
NOSQL DATABAE
======================
MONGODB,CASSANDRA


SQL
=================================
TYPES OF COMMAND
=============================
DDL===DATA DEFINATION LANGUAGE
CREATE,ALTER,RENAME,TRUNCATE,DROP
DML==DATA MANIPULATION LANGUAGE
INSERT,UPDATE,DELETE,MERGE
DATA RETRIEVAL=
=================================
SELECT
DCL===DATA CONTRL LANGUAGE
============================
GRANT,REVOKE
TCL==TRANSACTION CONTROL LANGUAGE
=========================================
COMMIT,ROLLBACK

DATA TYPES
========================
VARCHAR===ALPHANUMERIC
EX:SNAME VARCHAR(10)
INT(5)==99999
DECIMAL(7,2)==99999.99
DATE====YY/MM/DD

CONSTRAINTS
=========================================================
BEFORE INSERTING DATA YOU HAVE TO SATISFY CERTAIN RULES AND REGULATIONS CALLED CONSTRAINTS
1.PRIMARY KEY===IT DOES NOT ACCEPT NULL VALUE AS WELL AS DUPLICATE VALUE
EX:ADHARCARD
2.NOT NULL======YOU CAN'T LEFT BLANK TO THE FIELD
3.UNIQUE KEY===IT ACCEPT NULL VALUE BUT DOES NOT ACCEPT DUPLICATE VALUE
4.CHECK CONSTRAINT====YOU HAVE TO  SATISFY THE PREDEEFINED VALUES
EX:GENDER===M/F
5.FOREIGN KEY=====IT ACCEPTS OTHER TABLE PRIMARY KEY VALUE

DATE:20.04.2024
==================================================================================================
TABLE:PRODUCT
FIELD NAME                DATA TYPE                SIZE       CONSTRAINTS
================================================================================
PID                        VARCHAR                 10          PRIMARY KEY
PNAME                      VARCHAR                 25          NOT NULL
PQTY                       INT                     5
PRICE                     DECIMAL                 11,2
================================================================================
CREATE TABLE PRODUCT
(PID   VARCHAR(10) PRIMARY KEY,
 PNAME  VARCHAR(25) NOT NULL,
 PQTY   INT(5),
 PRICE  DECIMAL(11,2));
================================================================================

mysql> SHOW TABLES;
+-----------------+
| Tables_in_aiem1 |
+-----------------+
| dept            |
| dept1           |
| emp             |
| product         |
| student         |
+-----------------+
5 rows in set (0.00 sec)

mysql> DESC PRODUCT;
+-------+---------------+------+-----+---------+-------+
| Field | Type          | Null | Key | Default | Extra |
+-------+---------------+------+-----+---------+-------+
| PID   | varchar(10)   | NO   | PRI | NULL    |       |
| PNAME | varchar(25)   | NO   |     | NULL    |       |
| PQTY  | int           | YES  |     | NULL    |       |
| PRICE | decimal(11,2) | YES  |     | NULL    |       |
+-------+---------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

INSERT INTO PRODUCT VALUES('P1','TV',5,25000.00);
INSERT INTO PRODUCT VALUES('P2','TAB',6,22000.00);
INSERT INTO PRODUCT VALUES('P3','MOBILE',12,12000.00);
INSERT INTO PRODUCT VALUES('P4','REFRIGERATOR',2,27000.00);
INSERT INTO PRODUCT VALUES('P5','LAPTOP',15,45000.00);
INSERT INTO PRODUCT VALUES('P6','TV',2,32000.00);

FETCH ALL DATA
=======================
SELECT * FROM PRODUCT;
WHERE CLAUSE
====================================
SELECT * FROM PRODUCT WHERE PNAME='TV';
IN OPERATOR
=====================

mysql> SELECT * FROM PRODUCT WHERE PNAME IN('TV','MOBILE');
+-----+--------+------+----------+
| PID | PNAME  | PQTY | PRICE    |
+-----+--------+------+----------+
| P1  | TV     |    5 | 25000.00 |
| P3  | MOBILE |   12 | 12000.00 |
| P6  | TV     |    2 | 32000.00 |
+-----+--------+------+----------+
3 rows in set (0.00 sec)


mysql> SELECT * FROM PRODUCT WHERE PNAME NOT IN('TV','MOBILE');
+-----+--------------+------+----------+
| PID | PNAME        | PQTY | PRICE    |
+-----+--------------+------+----------+
| P2  | TAB          |    6 | 22000.00 |
| P4  | REFRIGERATOR |    2 | 27000.00 |
| P5  | LAPTOP       |   15 | 45000.00 |
+-----+--------------+------+----------+
3 rows in set (0.00 sec)
AND OPERATOR
===========================================================
mysql> SELECT * FROM PRODUCT WHERE PNAME='TV' AND PRICE>25000.00;
+-----+-------+------+----------+
| PID | PNAME | PQTY | PRICE    |
+-----+-------+------+----------+
| P6  | TV    |    2 | 32000.00 |
+-----+-------+------+----------+
1 row in set (0.00 sec)
================================================================
OR OPERATOR
========================================================
mysql> SELECT * FROM PRODUCT WHERE PNAME='TV' OR PRICE>25000.00;
+-----+--------------+------+----------+
| PID | PNAME        | PQTY | PRICE    |
+-----+--------------+------+----------+
| P1  | TV           |    5 | 25000.00 |
| P4  | REFRIGERATOR |    2 | 27000.00 |
| P5  | LAPTOP       |   15 | 45000.00 |
| P6  | TV           |    2 | 32000.00 |
+-----+--------------+------+----------+
4 rows in set (0.00 sec)
================================================================
LIKE OPERATOR
==============================================================
mysql> SELECT * FROM PRODUCT WHERE PNAME LIKE 'T%';
+-----+-------+------+----------+
| PID | PNAME | PQTY | PRICE    |
+-----+-------+------+----------+
| P1  | TV    |    5 | 25000.00 |
| P2  | TAB   |    6 | 22000.00 |
| P6  | TV    |    2 | 32000.00 |
+-----+-------+------+----------+
3 rows in set (0.00 sec)


mysql> SELECT * FROM PRODUCT WHERE PNAME LIKE '_A%';
+-----+--------+------+----------+
| PID | PNAME  | PQTY | PRICE    |
+-----+--------+------+----------+
| P2  | TAB    |    6 | 22000.00 |
| P5  | LAPTOP |   15 | 45000.00 |
+-----+--------+------+----------+
2 rows in set (0.00 sec)
mysql> SELECT * FROM PRODUCT WHERE PNAME LIKE '%P';
+-----+--------+------+----------+
| PID | PNAME  | PQTY | PRICE    |
+-----+--------+------+----------+
| P5  | LAPTOP |   15 | 45000.00 |
+-----+--------+------+----------+
1 row in set (0.00 sec)

mysql> SELECT * FROM PRODUCT WHERE PNAME LIKE '%A%';
+-----+--------------+------+----------+
| PID | PNAME        | PQTY | PRICE    |
+-----+--------------+------+----------+
| P2  | TAB          |    6 | 22000.00 |
| P4  | REFRIGERATOR |    2 | 27000.00 |
| P5  | LAPTOP       |   15 | 45000.00 |
+-----+--------------+------+----------+
3 rows in set (0.00 sec)
ARITHMETIC OPERATOR
==============================================
mysql> SELECT PID,PNAME,PQTY,PRICE,PRICE*PQTY FROM PRODUCT;
+-----+--------------+------+----------+------------+
| PID | PNAME        | PQTY | PRICE    | PRICE*PQTY |
+-----+--------------+------+----------+------------+
| P1  | TV           |    5 | 25000.00 |  125000.00 |
| P2  | TAB          |    6 | 22000.00 |  132000.00 |
| P3  | MOBILE       |   12 | 12000.00 |  144000.00 |
| P4  | REFRIGERATOR |    2 | 27000.00 |   54000.00 |
| P5  | LAPTOP       |   15 | 45000.00 |  675000.00 |
| P6  | TV           |    2 | 32000.00 |   64000.00 |
+-----+--------------+------+----------+------------+
6 rows in set (0.00 sec)
COLUMN ALIAS
=================================================================
mysql> SELECT PID,PNAME,PQTY,PRICE,PRICE*PQTY  TOTALSAL FROM PRODUCT;
+-----+--------------+------+----------+-----------+
| PID | PNAME        | PQTY | PRICE    | TOTALSAL  |
+-----+--------------+------+----------+-----------+
| P1  | TV           |    5 | 25000.00 | 125000.00 |
| P2  | TAB          |    6 | 22000.00 | 132000.00 |
| P3  | MOBILE       |   12 | 12000.00 | 144000.00 |
| P4  | REFRIGERATOR |    2 | 27000.00 |  54000.00 |
| P5  | LAPTOP       |   15 | 45000.00 | 675000.00 |
| P6  | TV           |    2 | 32000.00 |  64000.00 |
+-----+--------------+------+----------+-----------+
6 rows in set (0.00 sec)
=====================================================================
mysql> DELETE FROM PRODUCT WHERE PID='P6';
Query OK, 1 row affected (0.00 sec)

mysql> SELECT * FROM PRODUCT;
+-----+--------------+------+----------+
| PID | PNAME        | PQTY | PRICE    |
+-----+--------------+------+----------+
| P1  | TV           |    5 | 25000.00 |
| P2  | TAB          |    6 | 22000.00 |
| P3  | MOBILE       |   12 | 12000.00 |
| P4  | REFRIGERATOR |    2 | 27000.00 |
| P5  | LAPTOP       |   15 | 45000.00 |
+-----+--------------+------+----------+
5 rows in set (0.00 sec)
====================================================================
UPDATE PRODUCT SET PRICE=55000.00,PQTY=25 WHERE PID='P5';
mysql> UPDATE PRODUCT SET PRICE=55000.00,PQTY=25 WHERE PID='P5';
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> SELECT * FROM PRODUCT;
+-----+--------------+------+----------+
| PID | PNAME        | PQTY | PRICE    |
+-----+--------------+------+----------+
| P1  | TV           |    5 | 25000.00 |
| P2  | TAB          |    6 | 22000.00 |
| P3  | MOBILE       |   12 | 12000.00 |
| P4  | REFRIGERATOR |    2 | 27000.00 |
| P5  | LAPTOP       |   25 | 55000.00 |
+-----+--------------+------+----------+
5 rows in set (0.00 sec)
===========================================================================
JDBC
=====================================================================
JDBC==JAVA DATABASE CONNECTIVITY
WE NEED IMPORT ONE PACKAGE
import java.sql.*;====== SET OF CLASSES AND SET OF INTERFACES
INTERFACES
========================================================
1.Connection==========================ESTABLISH THE CONNECTION
2.Statement===========================EXECUTE SQL QUERY
3.PreparedStatement===================EXECUTE PRECOMPILED SQL STATEMENT
4.CallableStatement===================EXECUTE STORED PROCEDURE
5.ResultSet===========================RETRIEVE DATA FROM DATABASE AND STORE INTO RESULTSET
6.DatabaseMetaData====================GIVE DETAILS INFORMATION OF DATABASE
7.ResultSetMetaData===================GIVE DETAILS INFORMATION OF RESULTSET
============================================================================
CLASSES
============================================================================
DriverManager=================REGISTER AND LOAD THE JDBC DRIVER
Date==========================DEALS WITH DATE DATA TYPE
TimeStamp====================DEALS WITH BOTH DATE AND TIME
EXCEPTION HANDLE HERE
===================================================
1.ClassNotFoundException
2.SQLException
==========================================================
TYPES OF JDBC DRIVER
=============================================================
FOUR TYPES
===============================
1.JDBC ODBC BRIDGE============CALLED TYPE-I DRIVER
2.NATIVE API JAVA===============TYPE-II
3.JDBC NETWORK -ALL JAVA========TYPE-III
4.NATIVE PROTOCOL-ALL JAVA=====TYPE-IV
========================================================
CLIENT     SERVER
mysql> CREATE DATABASE FOODAPPS;
Query OK, 1 row affected (0.01 sec)

mysql> USE FOODAPPS;
Database changed
mysql> CREATE TABLE FOOD
    -> (FOODID   VARCHAR(10) PRIMARY KEY,
    ->  FOODNM   VARCHAR(25) NOT NULL,
    ->  PRICE    DECIMAL(11,2));
Query OK, 0 rows affected (0.04 sec)
mysql> INSERT INTO FOOD VALUES('F1','PIZZA',300.00);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO FOOD VALUES('F2','MOMO',200.00);
Query OK, 1 row affected (0.00 sec)

mysql> SELECT * FROM FOOD;
+--------+--------+--------+
| FOODID | FOODNM | PRICE  |
+--------+--------+--------+
| F1     | PIZZA  | 300.00 |
| F2     | MOMO   | 200.00 |
+--------+--------+--------+
2 rows in set (0.00 sec)

STEPS OF COMMUNICATION
=================================
1.import java.sql.*;
2.REGISTER AND LOAD THE JDBC DRIVER
3.ESTABLISH THE CONNECTION=====DATABASENAME,USERNAME,PASSWORD,PORTNUMBER
                               3306

  cn=DriverManager.getConnection("jdbc:mysql://localhost:3306/foodapps","root","arindam");
4.CREATE THE STATEMENT
5.EXECUTE THE  STATEMENT
6.RETRIEVE DATA INTO RESULTSET
7.CLOSE CONNECTION AND STATEMENT
==============================================================================================

INSERT================
UPDATE   CRUD OPERATION
DELETE
FETCH================

SELECT * FROM REGISTRATION WHERE UNAME=? AND PASS=?
 











   

